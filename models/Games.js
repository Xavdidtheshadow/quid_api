var mongoose = require('mongoose');

var GameSchema = new mongoose.Schema({
  // _id, generated by mongo
  teams: {
    type: [{type: mongoose.Schema.Types.ObjectId, ref: "Team"}], 
    required: true,
    validate: [function(val){
      return val.length === 2;
    }, 'Must have exactly 2 teams']
  },

  // scores not required so that we can use these to schedule
  scores: {
    type: [Number], 
    default: [0,0], 
    validate: [function(val){
      if (val.length !== 2) return false;
      if (val[0] % 10 !== 0 || val[1] % 10 !== 0) return false;
      return true;
    }, 'Must have 2 scores and be multiples of 10: [A, B]']
  },

  // a complete 0 overtime game will always have an id at 0
  // a complete 1 overtime game may have a non-null at 1
  // a complete 2 overtime game may have between 1 and 3 non-null elements
  snitch_snatches: {
    type: [mongoose.Schema.Types.ObjectId], 
    ref: "Team", 
    default: [null, null, null],
    validate: [function(val){
      return val.length === 3;
    }, 'Must have 3 snatches: [TEAM_ID, null?, null?]']
  },

  // number of overtimes
  overtimes: {type: Number, default: 0, min: 0, max: 2},

  // game time, in seconds
  // if this is 0, the game is incomplete
  duration: {type: Number, default: 0, min: 0},

  // staff info
  head_referee: {
    type: mongoose.Schema.Types.ObjectId, 
    ref: "Person", 
    default: null
  },
  snitch: {
    type: mongoose.Schema.Types.ObjectId, 
    ref: "Person", 
    default: null
  },

  forfeit: {type: Boolean, default: false},

  // any other notes about issues or things that wouldn't be apparent in the record
  notes: {type: String, default: null},

  // TODO: should have examples on how to post this
  // probably a long? that's standard across languages
  date: { type: Date, default: Date.now }

  // could also have location data, but it's hard to say what we want to store
});

mongoose.model('Game', GameSchema);